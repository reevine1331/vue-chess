{"remainingRequest":"/Users/ebinekenichi/Works/chess-project/node_modules/babel-loader/lib/index.js!/Users/ebinekenichi/Works/chess-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ebinekenichi/Works/chess-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ebinekenichi/Works/chess-project/src/components/layouts/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ebinekenichi/Works/chess-project/src/components/layouts/Board.vue","mtime":1566706349236},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport Accessible from \"./Accessible\";\nimport Pawn from \"./../pieces/Pawn\";\nimport Luke from \"./../pieces/Luke\";\nexport default {\n  components: {\n    Pawn: Pawn,\n    Luke: Luke,\n    Accessible: Accessible\n  },\n  data: function data() {\n    return {\n      pieces: [],\n      selected: {},\n      moves: {\n        Pawn: Pawn.data().move,\n        Luke: Luke.data().move\n      },\n      accessible: []\n    };\n  },\n  mounted: function mounted() {\n    var pieces = [];\n\n    _.map(Pawn.data().position, function (position, index) {\n      var pawn = {\n        piece: 'Pawn',\n        id: index,\n        position: position\n      };\n      pieces.push(pawn);\n    });\n\n    _.map(Luke.data().position, function (position, index) {\n      var luke = {\n        piece: 'Luke',\n        id: index,\n        position: position\n      };\n      pieces.push(luke);\n    });\n\n    this.pieces = pieces;\n  },\n  methods: {\n    selectPiece: function selectPiece(position, piece) {\n      this.selected = _.filter(this.pieces, {\n        position: position\n      })[0];\n      this.getAccessiblePanels();\n    },\n    selectPanel: function selectPanel(element) {\n      if (this.selected && this.accessible.indexOf(element.target.id) >= 0) {\n        this.movePiece(element.target.id);\n      }\n\n      this.emptyState();\n    },\n    movePiece: function movePiece(newPosition) {\n      var selected = this.selected;\n      var movingPiece = '';\n\n      _.map(this.pieces, function (piece, index) {\n        if (piece.position === selected.position) {\n          movingPiece = index;\n        }\n      });\n\n      this.pieces[movingPiece].position = newPosition;\n    },\n    getAccessiblePanels: function getAccessiblePanels() {\n      var currentPosition = this.selected.position.split('-');\n      var accessible = [];\n      var piecesPositions = [];\n\n      _.map(this.pieces, function (piece, index) {\n        piecesPositions.push(piece.position);\n      });\n\n      var checkExistingPieces = this.checkExistingPieces;\n\n      _.map(this.moves[this.selected.piece], function (move, index) {\n        var coordinateY = parseInt(currentPosition[0]) - parseInt(move[0]);\n        var coordinateX = parseInt(currentPosition[1]) + parseInt(move[1]);\n        var accessibleCoordinate = coordinateY + '-' + coordinateX;\n        if (!checkExistingPieces(coordinateX, coordinateY, piecesPositions, move)) return;\n        accessible.push(accessibleCoordinate);\n      });\n\n      this.accessible = accessible;\n    },\n    checkExistingPieces: function checkExistingPieces(x, y, positions, move) {\n      if (positions.indexOf(y + '-' + x) >= 0) {\n        return false;\n      }\n\n      return true;\n    },\n    emptyState: function emptyState() {\n      this.selected = {};\n      this.accessible = [];\n    }\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"board\">\n    <div v-for=\"(x, index) in 8\" :key='index'>\n      <div v-for=\"(y, index) in 8\" :key='index'>\n        <div\n        :class=\"[(x + y) % 2 == 0 ? 'board_square-white' : 'board_square-orange', accessible.indexOf(`${x}-${y}`) >= 0 ? '' : '']\"\n        :id='`${x}-${y}`'\n        v-on:click=\"selectPanel\"\n        >\n        <Accessible v-if=\"accessible.indexOf(`${x}-${y}`) >= 0\" />\n          <transition>\n            <Pawn\n            v-if=\"pieces.some(piece => piece.position === `${x}-${y}` && piece.piece === 'Pawn')\"\n            :selected = \"selected.position === `${x}-${y}` ? true: false\"\n            @select=\"selectPiece\"\n            />\n          </transition>\n          <transition>\n            <Luke\n            v-if=\"pieces.some(piece => piece.position === `${x}-${y}` && piece.piece === 'Luke')\"\n            :selected = \"selected.position === `${x}-${y}` ? true: false\"\n            @select=\"selectPiece\"\n            />\n          </transition>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport _ from 'lodash';\n\nimport Accessible from './Accessible';\n\nimport Pawn from './../pieces/Pawn';\nimport Luke from './../pieces/Luke';\n\nexport default {\n  components: {\n    Pawn,\n    Luke,\n    Accessible\n  },\n  data() {\n    return {\n      pieces: [],\n      selected: {},\n      moves: {\n        Pawn: Pawn.data().move,\n        Luke: Luke.data().move,\n      },\n      accessible:[]\n    }\n  },\n  mounted() {\n    let pieces = []\n\n    _.map(Pawn.data().position, function(position, index) {\n      let pawn = {\n        piece: 'Pawn',\n        id: index,\n        position: position\n      }\n      pieces.push(pawn)\n    })\n\n    _.map(Luke.data().position, function(position, index) {\n      let luke = {\n        piece: 'Luke',\n        id: index,\n        position: position\n      }\n      pieces.push(luke)\n    })\n\n    this.pieces = pieces;\n  },\n  methods: {\n    selectPiece(position, piece) {\n      this.selected = _.filter(this.pieces, { position: position })[0];\n      this.getAccessiblePanels();\n    },\n    selectPanel(element) {\n      if(this.selected && this.accessible.indexOf(element.target.id) >= 0) {\n        this.movePiece(element.target.id)\n      }\n      this.emptyState();\n    },\n    movePiece(newPosition) {\n      let selected = this.selected;\n      let movingPiece = '';\n      _.map(this.pieces, function(piece, index) {\n        if(piece.position === selected.position) {\n          movingPiece = index;\n        }\n      })\n      this.pieces[movingPiece].position = newPosition\n    },\n    getAccessiblePanels() {\n      const currentPosition = this.selected.position.split('-');\n      let accessible = [];\n      let piecesPositions = [];\n      _.map(this.pieces, function(piece, index) {\n        piecesPositions.push(piece.position);\n      });\n      let checkExistingPieces = this.checkExistingPieces;\n\n      _.map(this.moves[this.selected.piece], function(move, index) {\n        const coordinateY = parseInt(currentPosition[0]) - parseInt(move[0])\n        const coordinateX = parseInt(currentPosition[1]) + parseInt(move[1])\n        const accessibleCoordinate = coordinateY + '-' + coordinateX;\n        if(!checkExistingPieces(coordinateX, coordinateY, piecesPositions, move)) return;\n        accessible.push(accessibleCoordinate);\n      })\n      this.accessible = accessible\n    },\n    checkExistingPieces(x, y, positions, move) {\n      if(positions.indexOf(y + '-' + x) >= 0) {\n        return false;\n      }\n\n      return true;\n    },\n    emptyState() {\n      this.selected = {}\n      this.accessible = []\n    },\n  }\n}\n</script>"],"sourceRoot":"src/components/layouts"}]}