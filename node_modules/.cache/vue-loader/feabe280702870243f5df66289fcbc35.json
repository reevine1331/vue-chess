{"remainingRequest":"/Users/ebinekenichi/Works/chess-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ebinekenichi/Works/chess-project/src/components/layouts/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ebinekenichi/Works/chess-project/src/components/layouts/Board.vue","mtime":1566278601807},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ebinekenichi/Works/chess-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport _ from 'lodash';\n\nimport Accessible from './Accessible';\n\nimport Pawn from './../pieces/Pawn';\n\nexport default {\n  components: {\n    Pawn,\n    Accessible\n  },\n  data() {\n    return {\n      pieces: [],\n      selected: {},\n      moves: {\n        Pawn: Pawn.data().move,\n      },\n      accessible:[]\n    }\n  },\n  mounted() {\n    let pieces = []\n\n    _.map(Pawn.data().position, function(position, index) {\n      let pawn = {\n        piece: 'Pawn',\n        id: index,\n        position: position\n      }\n      pieces.push(pawn)\n    })\n    this.pieces = pieces;\n  },\n  methods: {\n    selectPiece(position, piece) {\n      this.selected = _.filter(this.pieces, { position: position })[0];\n      this.getAccessiblePanels();\n    },\n    selectPanel(element) {\n      if(this.selected && this.accessible.indexOf(element.target.id) >= 0) {\n        this.movePiece(element.target.id)\n      }\n      this.selected = {}\n      this.accessible = []\n    },\n    movePiece(newPosition) {\n      let selected = this.selected;\n      let movingPiece = {}\n      _.map(this.pieces, function(piece, index) {\n        if(piece.position === selected.position) {\n          movingPiece = {\n            index: index,\n            position: piece.position\n          }\n        }\n      })\n      this.pieces[movingPiece.index].position = newPosition\n    },\n    getAccessiblePanels() {\n      if(this.selected.position) {\n        const currentPosition = this.selected.position.split('-')\n        let accessible = []\n        _.map(this.moves[this.selected.piece], function(move, index) {\n          const coordinateY = parseInt(currentPosition[0]) - parseInt(move[0])\n          const coordinateX = parseInt(currentPosition[1]) + parseInt(move[1])\n          const nexCoordinate = coordinateY + '-' + coordinateX;\n          accessible.push(nexCoordinate);\n        })\n        this.accessible = accessible\n      }\n    }\n  }\n}\n",{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/components/layouts","sourcesContent":["<template>\n  <div class=\"board\">\n    <div v-for=\"(x, index) in 8\" :key='index'>\n      <div v-for=\"(y, index) in 8\" :key='index'>\n        <div\n        :class=\"[(x + y) % 2 == 0 ? 'board_square-white' : 'board_square-orange', accessible.indexOf(`${x}-${y}`) >= 0 ? '' : '']\"\n        :id='`${x}-${y}`'\n        v-on:click=\"selectPanel\"\n        >\n        <Accessible v-if=\"accessible.indexOf(`${x}-${y}`) >= 0\" />\n          <Pawn\n          v-if=\"pieces.some(piece => piece.piece === 'Pawn') && pieces.some(piece => piece.position === `${x}-${y}`)\"\n          :selected = \"selected.position === `${x}-${y}` ? true: false\"\n          @select=\"selectPiece\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport _ from 'lodash';\n\nimport Accessible from './Accessible';\n\nimport Pawn from './../pieces/Pawn';\n\nexport default {\n  components: {\n    Pawn,\n    Accessible\n  },\n  data() {\n    return {\n      pieces: [],\n      selected: {},\n      moves: {\n        Pawn: Pawn.data().move,\n      },\n      accessible:[]\n    }\n  },\n  mounted() {\n    let pieces = []\n\n    _.map(Pawn.data().position, function(position, index) {\n      let pawn = {\n        piece: 'Pawn',\n        id: index,\n        position: position\n      }\n      pieces.push(pawn)\n    })\n    this.pieces = pieces;\n  },\n  methods: {\n    selectPiece(position, piece) {\n      this.selected = _.filter(this.pieces, { position: position })[0];\n      this.getAccessiblePanels();\n    },\n    selectPanel(element) {\n      if(this.selected && this.accessible.indexOf(element.target.id) >= 0) {\n        this.movePiece(element.target.id)\n      }\n      this.selected = {}\n      this.accessible = []\n    },\n    movePiece(newPosition) {\n      let selected = this.selected;\n      let movingPiece = {}\n      _.map(this.pieces, function(piece, index) {\n        if(piece.position === selected.position) {\n          movingPiece = {\n            index: index,\n            position: piece.position\n          }\n        }\n      })\n      this.pieces[movingPiece.index].position = newPosition\n    },\n    getAccessiblePanels() {\n      if(this.selected.position) {\n        const currentPosition = this.selected.position.split('-')\n        let accessible = []\n        _.map(this.moves[this.selected.piece], function(move, index) {\n          const coordinateY = parseInt(currentPosition[0]) - parseInt(move[0])\n          const coordinateX = parseInt(currentPosition[1]) + parseInt(move[1])\n          const nexCoordinate = coordinateY + '-' + coordinateX;\n          accessible.push(nexCoordinate);\n        })\n        this.accessible = accessible\n      }\n    }\n  }\n}\n</script>"]}]}